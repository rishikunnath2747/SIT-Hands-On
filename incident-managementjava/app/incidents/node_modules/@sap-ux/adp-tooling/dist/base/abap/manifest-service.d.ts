import type { Manifest, ManifestNamespace } from '@sap-ux/project-access';
import type { ToolsLogger } from '@sap-ux/logger';
import type { AdpPreviewConfig, DescriptorVariant } from '../../types';
import type { AxiosRequestConfig, ProviderConfiguration } from '@sap-ux/axios-extension';
type DataSources = Record<string, ManifestNamespace.DataSource>;
/**
 * Service class for handling operations related to the manifest of a UI5 application.
 * The class supports operations for both base and merged manifests.
 * It provides methods to fetch the manifest, data sources and metadata of a data source.
 *
 */
export declare class ManifestService {
    private readonly provider;
    private readonly logger;
    private manifest;
    private appInfo;
    /**
     * Private constructor to initialize the ManifestService.
     *
     * @param provider - The ABAP service provider.
     * @param logger - The logger instance.
     */
    private constructor();
    /**
     * Initializes the ManifestService with the given ADP configuration and logger.
     *
     * @param adpConfig - The ADP preview configuration.
     * @param logger - The logger instance.
     * @param requestOptions - Optional configuration options for the Axios request, such as headers, timeout, and base URL
     * @returns A promise that resolves to an instance of ManifestService.
     */
    private static init;
    /**
     * Creates an instance of the ManifestService and fetches the base manifest of the application.
     *
     * @param appId - The application ID.
     * @param adpConfig - The ADP preview configuration.
     * @param logger - The logger instance.
     * @param requestOptions - Optional configuration options for the Axios request, such as headers, timeout, and base URL
     * @returns A promise that resolves to an instance of ManifestService.
     */
    static initBaseManifest(appId: string, adpConfig: AdpPreviewConfig, logger: ToolsLogger, requestOptions?: AxiosRequestConfig & Partial<ProviderConfiguration>): Promise<ManifestService>;
    /**
     * Creates an instance of the ManifestService and fetches the merged manifest of the application.
     *
     * @param basePath - The base path of the application.
     * @param variant - The descriptor variant.
     * @param adpConfig - The ADP preview configuration.
     * @param logger - The logger instance.
     * @param requestOptions - Optional configuration options for the Axios request, such as headers, timeout, and base URL
     * @returns A promise that resolves to an instance of ManifestService.
     */
    static initMergedManifest(basePath: string, variant: DescriptorVariant, adpConfig: AdpPreviewConfig, logger: ToolsLogger, requestOptions?: AxiosRequestConfig & Partial<ProviderConfiguration>): Promise<ManifestService>;
    /**
     * Fetches the base manifest for a given application ID.
     *
     * @param appId - The application ID.
     * @returns A promise that resolves when the base manifest is fetched.
     * @throws Error if the manifest URL is not found or fetching/parsing fails.
     */
    private fetchBaseManifest;
    /**
     * Fetches the application information for a given application ID.
     *
     * @param appId - The application ID.
     * @returns A promise that resolves when the application information is fetched.
     */
    private fetchAppInfo;
    /**
     * Returns the manifest fetched by the service during initialization.
     *
     * @returns The current manifest.
     */
    getManifest(): Manifest;
    /**
     * Fetches the merged manifest for a given application.
     *
     * @param basePath - The base path of the application.
     * @param descriptorVariantId - The descriptor variant ID.
     * @returns A promise that resolves to the merged manifest.
     */
    private fetchMergedManifest;
    /**
     * Returns the data sources from the manifest.
     *
     * @returns The data sources from the manifest.
     * @throws Error if no data sources are found in the manifest.
     */
    getManifestDataSources(): DataSources;
    /**
     * Returns the metadata of a data source.
     *
     * @param dataSourceId - The ID of the data source.
     * @returns A promise that resolves to the metadata of the data source.
     * @throws Error if no metadata path is found in the manifest or fetching fails.
     */
    getDataSourceMetadata(dataSourceId: string): Promise<string>;
}
export {};
//# sourceMappingURL=manifest-service.d.ts.map